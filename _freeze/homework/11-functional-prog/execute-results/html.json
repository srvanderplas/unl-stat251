{
  "hash": "8a029e80e9f4c93787115ffd6e19514b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Homework 11: Functional Programming'\ndate: '2024-04-29'\nexecute-dir: ../homework-repos/11-functional-prog/\nengine: knitr\nauthor: Homework\ncategories:\n- Week13\n- HW\n---\n\n\nNote: This assignment must be submitted in github classroom.\n\n---\ntitle: \"Functional Programming: Cats and Dogs\"\nauthor: \"Your Name\"\ndate: \"Due: May 5, 2023\"\noutput: html_document\nnumber-sections: true\nnumber-depth: 2\n---\n\n# Introduction\n\nOne of the most common places where we use functional programming is with hierarchically structured data; commonly, we get data like this from the internet in JavaScript Object Notation (JSON) format. \n\nI've used the Petfinder API to get data about 20 dogs and 20 cats that up for adoption, good with kids, and near Lincoln, NE. \nIf you want to see how I did that, you can look at [get_data.R](get_data.R) - to run the code, you'll need to register for your own Petfinder API key.\n\nUse functional programming techniques (map, apply, `purrr`, lambda functions, etc.) to accomplish the following tasks. \n\n0. Decide whether to use R or Python for dogs or cats. You must use one language for one animal and the other language for the other animal. Fill in the markdown headers below accordingly.\n\n1. Read in the JSON file.\n\n2. Assemble a data frame with the animal's name, age, sex, breed(s), and organization ID.\n\n3. Add a column to your data frame with a list of picture links    \n(Hint: use list columns)\n\n4. (Bonus) Find some way to generate a collage or gif of pictures of the animals up for adoption right now.\n\n# Solutions\n## R - Animal (change this to match)\n\n::: {.cell hash='11-functional-prog_cache/html/unnamed-chunk-1_3a4a59beb45c47e57b23058eb56da969'}\n\n:::\n\n\n## Python - Animal (change this to match)\n\n::: {.cell hash='11-functional-prog_cache/html/unnamed-chunk-2_56c17bf5e6f4a8fe3d1c5ce0cb43b5d8'}\n\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}