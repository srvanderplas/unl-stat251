{
  "hash": "1fc8a28a4cfd99382374d8deb67e542e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Homework 2: Reviewing R and Python\"\nauthor: \"Your Name\"\ndate: \"Due: Feb 5, 2023\"\noutput: html_document\n---\n\n\n\n\nA palindrome is a string that is equal to the reverse of that string, such as \"Mom\", \"Hannah\" or \"We panic in a pew.\"\n\nTraditionally, a phrase is tested for being a palindrome once all spaces and punctuation has been removed, and all letters are written in the same case. You will need to think about how to do these tasks in R and python.\n\n# Problem 1: Simple Palindromes\n## Pseudocode\n\nWrite a detailed list of steps to process a string named `test` to test that it is a palindrome. \n\nYou may find it helpful to write down some test words and work through them as if you were an algorithm. If you do this, please take a picture of your scratch paper, put it in the homework directory, and add it to your git repository along with your assignment solution.\n\nHint: The final items in this list of steps should be defining a variable `revtest` that is `test` with the letters reversed, and then comparing `test` and `revtest` for equality.\n\n\n\n## R\n\nTurn your pseudocode into a sequence of statements in R that work with a variable named `test`.\nAt this point, there is no need to write these steps in a function - we'll get there.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-1_aafd36b202da46e11c983f8bd30f521d'}\n\n```{.r .cell-code}\ntest <- \"Hannah\"\ntest2 <- \"not-a-palindrome\"\n\n# Your steps go here\n```\n:::\n\n\n\n## Python\n\nTurn your pseudocode into a sequence of statements in python that work with a variable named `test`.\nAt this point, there is no need to write these steps in a function - we'll get there.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_744089bdf43c411746b292b20f45d471'}\n\n```{.python .cell-code}\ntest = \"Hannah\"\ntest2 = \"not-a-palindrome\"\n\n# Your steps go here\n```\n:::\n\n\n\n# Problem 2: Functional Palindromes\n\nIn R and Python, use your code above to create a function, `palindrome`, which takes an argument, `x`, and returns a logical value indicating whether `x` is a palindrome.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-3_23d6d8daf5f5f2d886ce10f78a3fe1e9'}\n\n```{.r .cell-code}\n# Your R function goes here\n```\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-4_664c35c0795d58e992c7d905949d1f29'}\n\n```{.python .cell-code}\n# Your python function goes here\n```\n:::\n\n\n\n# Problem 3: Vectors of Palindromes\n\nUse a loop, map, or apply statement to find all of the palindromes in a vector. I should be able to provide a different vector and use your function to find all of the palindromes.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-5_be88d88af82fbd35ff224ca5f91d2718'}\n\n```{.r .cell-code}\ntest_vec <- c(\"taco cat\", \"UFO tofu\", \"In palindromes, spacing, punctuation, and capitalization are usually ignored.\", \"Borrow or rob?\", \"dithyrambic\", \"Never odd or even.\", \"R rules, Python drools!\", \"Won't lovers revolt now?\", \"Ma is a nun, as I am.\")\n```\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-6_8b4caa3e3a752bbfe53e8399eaac1ef9'}\n\n```{.python .cell-code}\ntest_vec = [\"taco cat\", \"UFO tofu\", \"In palindromes, spacing, punctuation, and capitalization are usually ignored.\", \"Borrow or rob?\", \"dithyrambic\", \"Never odd or even.\", \"R rules, Python drools!\", \"Won't lovers revolt now?\", \"Ma is a nun, as I am.\"]\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}