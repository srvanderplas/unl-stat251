[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Stat 251: Data Wrangling",
    "section": "",
    "text": "Course Materials\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nFeb 13, 2023\n\n\nHomework 3: Cipher\n\n\n\n\n\n\nFeb 6, 2023\n\n\nHomework 2: Review\n\n\n\n\n\n\nJan 30, 2023\n\n\nHomework 1: Git and Github\n\n\n\n\n\n\nJan 26, 2023\n\n\nVersion Control\n\n\n\n\n\n\nJan 24, 2023\n\n\nStat 251 - Introduction\n\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\nExams\nComing soon!"
  },
  {
    "objectID": "homework/01-git-github.html",
    "href": "homework/01-git-github.html",
    "title": "Homework 1: Git and Github",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/01-git-github.html#course-overview-and-learning-outcomes",
    "href": "homework/01-git-github.html#course-overview-and-learning-outcomes",
    "title": "Homework 1: Git and Github",
    "section": "ü§ì Course overview and learning outcomes",
    "text": "ü§ì Course overview and learning outcomes\nThe goal of this course is to give you a brief introduction to GitHub. We‚Äôll also provide you with materials for further learning and a few ideas to get you started on our platform. üöÄ"
  },
  {
    "objectID": "homework/01-git-github.html#octocat-git-and-github",
    "href": "homework/01-git-github.html#octocat-git-and-github",
    "title": "Homework 1: Git and Github",
    "section": ":octocat: Git and GitHub",
    "text": ":octocat: Git and GitHub\nGit is a distributed Version Control System (VCS), which means it is a useful tool for easily tracking changes to your code, collaborating, and sharing. With Git you can track the changes you make to your project so you always have a record of what you‚Äôve worked on and can easily revert back to an older version if need be. It also makes working with others easier‚Äîgroups of people can work together on the same project and merge their changes into one final source!\nGitHub is a way to use the same power of Git all online with an easy-to-use interface. It‚Äôs used across the software world and beyond to collaborate and maintain the history of projects.\nGitHub is home to some of the most advanced technologies in the world. Whether you‚Äôre visualizing data or building a new game, there‚Äôs a whole community and set of tools on GitHub that can get you to the next step. This course starts with the basics of GitHub, but we‚Äôll dig into the rest later."
  },
  {
    "objectID": "homework/01-git-github.html#octocat-understanding-the-github-flow",
    "href": "homework/01-git-github.html#octocat-understanding-the-github-flow",
    "title": "Homework 1: Git and Github",
    "section": ":octocat: Understanding the GitHub flow",
    "text": ":octocat: Understanding the GitHub flow\nThe GitHub flow is a lightweight workflow that allows you to experiment and collaborate on your projects easily, without the risk of losing your previous work.\n\nRepositories\nA repository is where your project work happens‚Äìthink of it as your project folder. It contains all of your project‚Äôs files and revision history. You can work within a repository alone or invite others to collaborate with you on those files.\n\n\nCloning\nWhen a repository is created with GitHub, it‚Äôs stored remotely in the ‚òÅÔ∏è. You can clone a repository to create a local copy on your computer and then use Git to sync the two. This makes it easier to fix issues, add or remove files, and push larger commits. You can also use the editing tool of your choice as opposed to the GitHub UI. Cloning a repository also pulls down all the repository data that GitHub has at that point in time, including all versions of every file and folder for the project! This can be helpful if you experiment with your project and then realize you liked a previous version more. To learn more about cloning, read ‚ÄúCloning a Repository‚Äù.\n\n\nCommitting and pushing\nCommitting and pushing are how you can add the changes you made on your local machine to the remote repository in GitHub. That way your instructor and/or teammates can see your latest work when you‚Äôre ready to share it. You can make a commit when you have made changes to your project that you want to ‚Äúcheckpoint.‚Äù You can also add a helpful commit message to remind yourself or your teammates what work you did (e.g.¬†‚ÄúAdded a README with information about our project‚Äù).\nOnce you have a commit or multiple commits that you‚Äôre ready to add to your repository, you can use the push command to add those changes to your remote repository. Committing and pushing may feel new at first, but we promise you‚Äôll get used to it üôÇ"
  },
  {
    "objectID": "homework/01-git-github.html#github-terms-to-know",
    "href": "homework/01-git-github.html#github-terms-to-know",
    "title": "Homework 1: Git and Github",
    "section": "üíª GitHub terms to know",
    "text": "üíª GitHub terms to know\n\nRepositories\nWe mentioned repositories already, they are where your project work happens, but let‚Äôs talk a bit more about the details of them! As you work more on GitHub you will have many repositories which may feel confusing at first. Fortunately, your ‚ÄúGitHub dashboard‚Äù helps to easily navigate to your repositories and see useful information about them. Make sure you‚Äôre logged in to see it!\nRepositories also contain READMEs. You can add a README file to your repository to tell other people why your project is useful, what they can do with your project, and how they can use it. We are using this README to communicate how to learn Git and GitHub with you. üòÑ To learn more about repositories read ‚ÄúCreating, Cloning, and Archiving Repositories and ‚ÄúAbout README‚Äôs‚Äù.\n\n\nBranches\nYou can use branches on GitHub to isolate work that you do not want merged into your final project just yet. Branches allow you to develop features, fix bugs, or safely experiment with new ideas in a contained area of your repository. Typically, you might create a new branch from the default branch of your repository‚Äîmain. This makes a new working copy of your repository for you to experiment with. Once your new changes have been reviewed by a teammate, or you are satisfied with them, you can merge your changes into the default branch of your repository. To learn more about branching, read ‚ÄúAbout Branches‚Äù.\nNote: In this class, you will not be required to use branches.\n\n\nForks\nA fork is another way to copy a repository, but is usually used when you want to contribute to someone else‚Äôs project. Forking a repository allows you to freely experiment with changes without affecting the original project and is very popular when contributing to open source software projects! To learn more about forking, read ‚ÄúFork a repo‚Äù\nNote: In this class, you will not be required to use forks.\n\n\nPull requests\nWhen working with branches, you can use a pull request to tell others about the changes you want to make and ask for their feedback. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add more changes if need be. You can add specific people as reviewers of your pull request which shows you want their feedback on your changes! Once a pull request is ready-to-go, it can be merged into your main branch. To learn more about pull requests, read ‚ÄúAbout Pull Requests‚Äù.\nNote: In this course, you will not be required to use pull requests.\n\n\nIssues\nIssues are a way to track enhancements, tasks, or bugs for your work on GitHub. Issues are a great way to keep track of all the tasks you want to work on for your project and let others know what you plan to work on. You can also use issues to tell a favorite open source project about a bug you found or a feature you think would be great to add!\nFor larger projects, you can keep track of many issues on a project board. GitHub Projects help you organize and prioritize your work and you can read more about them in this ‚ÄúAbout Project boards document. You likely won‚Äôt need a project board for your assignments, but once you move on to even bigger projects, they‚Äôre a great way to organize your team‚Äôs work! You can also link together pull requests and issues to show that a fix is in progress and to automatically close the issue when someone merges the pull request. To learn more about issues and linking them to your pull requests, read ‚ÄúAbout Issues‚Äù.\n\n\nYour user profile\nYour profile page tells people the story of your work through the repositories you‚Äôre interested in, the contributions you‚Äôve made, and the conversations you‚Äôve had. You can also give the world a unique view into who you are with your profile README. You can use your profile to let future employers know all about you! To learn more about your user profile and adding and updating your profile README, read ‚ÄúManaging Your Profile README‚Äù.\n\n\nUsing markdown on GitHub\nYou might have noticed already, but you can add some fun styling to your issues, pull requests, and files. ‚ÄúMarkdown‚Äù is an easy way to style your issues, pull requests, and files with some simple syntax. This can be helpful to organize your information and make it easier for others to read. You can also drop in gifs and images to help convey your point! To learn more about using GitHub‚Äôs flavor of markdown, read ‚ÄúBasic Writing and Formatting Syntax‚Äù.\n\n\nEngaging with the GitHub community\nThe GitHub community is vast. There are many types of people who use GitHub in their day to day‚Äîstudents like you, professional developers, hobbyists working on open source projects, and explorers who are just jumping into the world of software development on their own. There are many ways you can interact with the larger GitHub community, but here are three places where you can start.\n\nStarring repositories\nIf you find a repository interesting or you want to keep track of it, star it! When you star a repository it‚Äôs also used as a signal to surface better recommendations on github.com/explore. If you‚Äôd like to get back to your starred repositories you can do so via your user profile. To learn more about starring repositories, read ‚ÄúSaving Repositories with Stars‚Äù.\n\n\nFollowing users\nYou can follow people on GitHub to receive notifications about their activity and discover projects in their communities. When you follow a user, their public GitHub activity will show up on your dashboard so you can see all the cool things they are working on. To learn more about following users, read ‚ÄúFollowing People‚Äù.\n\n\nBrowsing GitHub Explore\nGitHub Explore is a great place to do just that ‚Ä¶ explore :smile: You can find new projects, events, and developers to interact with.\nYou can check out the GitHub Explore website at github.com/explore. The more you intereact with GitHub the more tailored your Explore view will be."
  },
  {
    "objectID": "homework/01-git-github.html#next-steps",
    "href": "homework/01-git-github.html#next-steps",
    "title": "Homework 1: Git and Github",
    "section": "üìù Next steps",
    "text": "üìù Next steps\n\nClone this repository to your local machine\nOn your local machine, create a new markdown file in this repository named ‚ÄòAbout_Me.md‚Äô. Provide a short biography/introduction for yourself and use markdown formatting (headers, bulleted lists, etc.)\nCommit your changes to your new file locally and push them back to your github repository. Check on Github to make sure the new file appears.\nTo get full credit for your assignment, you will need to have worked with your git repository locally. I will be able to see if you have used the github editor to make your changes instead :)."
  },
  {
    "objectID": "homework/01-git-github.html#resources",
    "href": "homework/01-git-github.html#resources",
    "title": "Homework 1: Git and Github",
    "section": "üìö Resources",
    "text": "üìö Resources\n\nA short video explaining what GitHub is\nGit and GitHub learning resources\nUnderstanding the GitHub flow\nHow to use GitHub branches\nInteractive Git training materials\nGitHub‚Äôs Learning Lab\nEducation community forum\nGitHub community forum"
  },
  {
    "objectID": "homework/01-git-github.html#optional-extra-steps",
    "href": "homework/01-git-github.html#optional-extra-steps",
    "title": "Homework 1: Git and Github",
    "section": "Optional extra steps",
    "text": "Optional extra steps\n\nOpen a pull request and let your teacher know that you‚Äôve finished this course.\n\nCreate your profile README. Let the world know a little bit more about you! What are you interested in learning? What are you working on? What‚Äôs your favorite hobby? Learn more about creating your profile README in the document, ‚ÄúManaging Your Profile README‚Äù.\nGo to your user dashboard and create a new repository. Experiment with the features within that repository to familiarize yourself with them.\nLet us know what you liked or didn‚Äôt like about the content of this course. What would you like to see more of? What would be interesting or helpful to your learning journey?"
  },
  {
    "objectID": "homework/02-review.html",
    "href": "homework/02-review.html",
    "title": "Homework 2: Reviewing R and Python",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom.\nA palindrome is a string that is equal to the reverse of that string, such as ‚ÄúMom‚Äù, ‚ÄúHannah‚Äù or ‚ÄúWe panic in a pew.‚Äù\nTraditionally, a phrase is considered a palindrome once all spaces and punctuation has been removed, and all letters are written in the same case."
  },
  {
    "objectID": "homework/02-review.html#pseudocode",
    "href": "homework/02-review.html#pseudocode",
    "title": "Homework 2: Reviewing R and Python",
    "section": "Pseudocode",
    "text": "Pseudocode\nWrite a detailed list of steps to process a string named test to test that it is a palindrome.\nHint: The final items in this list of steps should be defining a variable revtest that is test with the letters reversed, and then comparing test and revtest for equality."
  },
  {
    "objectID": "homework/02-review.html#r",
    "href": "homework/02-review.html#r",
    "title": "Homework 2: Reviewing R and Python",
    "section": "R",
    "text": "R\nTurn your pseudocode into a sequence of statements in R that work with a variable named test. At this point, there is no need to write these steps in a function - we‚Äôll get there.\n\ntest <- \"Hannah\"\n\n# Your steps go here"
  },
  {
    "objectID": "homework/02-review.html#python",
    "href": "homework/02-review.html#python",
    "title": "Homework 2: Reviewing R and Python",
    "section": "Python",
    "text": "Python\nTurn your pseudocode into a sequence of statements in python that work with a variable named test. At this point, there is no need to write these steps in a function - we‚Äôll get there.\n\ntest = \"Hannah\"\n\n# Your steps go here"
  },
  {
    "objectID": "homework/03-cipher.html",
    "href": "homework/03-cipher.html",
    "title": "decodeR: Base R",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom.\nThis assignment is modified from the decodeR exercises by Kelly Bodwin and Allison Theobold.\nIn this assignment, you will be creating and manipulating vectors, lists, and data frames to uncover a top secret message.\nSome advice: * Work with those around you * Google is your friend! If an error is confusing, copy it into Google and see what other people are saying. If you don‚Äôt know how to do something, search for it. * Just because there is no error message doesn‚Äôt mean everything went smoothly. Use the console to check each step and make sure you have accomplished what you wanted to accomplish."
  },
  {
    "objectID": "homework/03-cipher.html#part-one-setup",
    "href": "homework/03-cipher.html#part-one-setup",
    "title": "decodeR: Base R",
    "section": "Part One: Setup",
    "text": "Part One: Setup\nEach of the following R chunks will cause an error and/or do the desired task incorrectly. Find the mistake, and correct it to complete the intended action. For each error, write 1-2 sentences to reflect on what the mistake was and how you found it and fixed it.\n\nCreate vectors containing the upper case letters, lower case letters, and some punctuation marks.\n\n\nlower_case <- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n\nupper_case <- c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\" \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n\npunctuation <- c(\".\", \",\", \"!\", \"?\", \"'\", \"\"\", \"(\", \")\", \" \", \"-\", \";\", \":\")\n\nError: <text>:3:56: unexpected string constant\n2: \n3: upper_case <- c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\" \"I\"\n                                                          ^\n\n\n\nMake one long vector containing all the symbols.\n\n\nmy_symbols <- cbind(lower_case, upper_case, punctuation)\n\nError in cbind(lower_case, upper_case, punctuation): object 'lower_case' not found\n\n\n\nTurn the my_symbols vector into a data frame, with the variable name ‚ÄúSymbol‚Äù\n\n\nmy_symbols <- dataframe(my_symbols)\n\nError in dataframe(my_symbols): could not find function \"dataframe\"\n\nnames(my_symbols) = Symbol\n\nError in eval(expr, envir, enclos): object 'Symbol' not found\n\n\n\nFind the total number of symbols we have in our data frame.\n\n\nlen <- length(my_symbols)\n\nError in eval(expr, envir, enclos): object 'my_symbols' not found\n\n\n\nCreate a new variable in your dataframe that assigns a number to each symbol.\n\n\nmy_symbols%Num <- 1:len\n\nError: <text>:1:11: unexpected input\n1: my_symbols%Num <- 1:len\n              ^"
  },
  {
    "objectID": "homework/03-cipher.html#part-two-decoding-the-secret-message.",
    "href": "homework/03-cipher.html#part-two-decoding-the-secret-message.",
    "title": "decodeR: Base R",
    "section": "Part Two: Decoding the secret message.",
    "text": "Part Two: Decoding the secret message.\nThis chunk will load up the encoded secret message as a vector:\n\ntop_secret <- read.csv(\"Secret_Code\", header = FALSE)$V1\n\nBy altering this top secret set of numbers, you will be able to create a message. Write your own code to complete the steps below.\n\nAdd 14 to every number.\nMultiply every number by 18, then subtract 257.\nExponentiate every number. (That is, do e1.)\nSquare every number.\n\nCheckpoint: Headquarters has informed you that at this stage of decoding, there should be 352 numbers in the secret message that are below 17.\n\nTurn your vector of numbers into a matrix with 5 columns.\nSeparately from your top secret numbers, create a vector of all the even numbers between 1 and 382. Name it ‚Äúevens‚Äù. That is, ‚Äúevens‚Äù should contain 2, 4, 6, 8 ‚Ä¶, 382.\nSubtract the ‚Äúevens‚Äù vector from the first column of your secret message matrix.\nSubtract 100 from all numbers in the 18-24th rows of the 3rd column.\nMultiply all numbers in the 4th and 5th column by 2.\nTurn your matrix back into a vector.\n\nCheckpoint: Headquarters has informed you that at this stage of decoding, all numbers in indices 500 and beyond are below 100.\n\nTake the square root of all numbers in indices 38 to 465.\nRound all numbers to the nearest whole number.\nReplace all instances of the number 39 with 20.\n\nCheckpoint: Headquarters has informed you that your final message should have 344 even numbers."
  },
  {
    "objectID": "homework/03-cipher.html#part-3-the-secret-message",
    "href": "homework/03-cipher.html#part-3-the-secret-message",
    "title": "decodeR: Base R",
    "section": "Part 3: The secret message!",
    "text": "Part 3: The secret message!\nUse your final vector of numbers as indices for my_symbols to discover the final message!\nGoogle the first line of this message, if you do not recognize it, to see what it is.\nWrite 3-4 sentences about what you learned from this investigation. What problems did you encounter, and how did you solve them?\n\nrm ./Secret_Code"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#introduce-yourself",
    "href": "slides/01-Syllabus-and-Introductions.html#introduce-yourself",
    "title": "Stat 251 - Introduction",
    "section": "Introduce yourself!",
    "text": "Introduce yourself!\n\nName / Year / Major\nWhat do you hope to learn in this class?\nPrevious computing experience?\nIs a poptart a ravioli? Why or why not?"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#my-introduction",
    "href": "slides/01-Syllabus-and-Introductions.html#my-introduction",
    "title": "Stat 251 - Introduction",
    "section": "My Introduction",
    "text": "My Introduction\n\nSusan Vanderplas\nAssistant Professor in Statistics\nPh.D.¬†from Iowa State in 2015\nUndergrad from Texas A&M in 2009\nR user for 13 years, Python user for 1.5 years\nDabbled in JavaScript, HTML, C/C++\nI have Prosopagnosia - face blindness\nOn Poptarts and Ravioli‚Ä¶"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#contact-info",
    "href": "slides/01-Syllabus-and-Introductions.html#contact-info",
    "title": "Stat 251 - Introduction",
    "section": "Contact Info",
    "text": "Contact Info\n\nEmail: susan.vanderplas@unl.edu\nOffice: 343D Hardin Hall North Wing\nPhone: I don‚Äôt ever answer it‚Ä¶ use email\nOffice Hours: https://calendly.com/drvanderplas/officehours\nSelf-serve, by Zoom unless you specify otherwise.\nTextbook: https://srvanderplas.github.io/stat-computing-r-python\nCourse site: https://srvanderplas.github.io/unl-stat251/"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#course-objectives",
    "href": "slides/01-Syllabus-and-Introductions.html#course-objectives",
    "title": "Stat 251 - Introduction",
    "section": "Course Objectives",
    "text": "Course Objectives\n\nUse appropriate visualizations to explore and assess data and its applicability to a problem\nWrite code to reshape and reformat moderately complex and/or messy data in a reproducible manner\nCreate graphical displays to explore data, assess statistical models, and present model results\nAdapt pre-existing code for sophisticated visualizations to new data.\nImplement an algorithm or procedure for data modification given in pseudocode\nWrite pseudocode to describe and document modifications made to the dataset\nAccess documentation and source code to determine how software works (or why it doesn‚Äôt)\nIdentify problems in a dataset that limit the analyses which are appropriate for the data"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#textbook",
    "href": "slides/01-Syllabus-and-Introductions.html#textbook",
    "title": "Stat 251 - Introduction",
    "section": "Textbook",
    "text": "Textbook\nhttps://srvanderplas.github.io/stat-computing-r-python/"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#class-schedule",
    "href": "slides/01-Syllabus-and-Introductions.html#class-schedule",
    "title": "Stat 251 - Introduction",
    "section": "Class Schedule",
    "text": "Class Schedule"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#outline",
    "href": "slides/01-Syllabus-and-Introductions.html#outline",
    "title": "Stat 251 - Introduction",
    "section": "Outline",
    "text": "Outline\nSubject to change based on how much of Stat 151 you are already familiar with‚Ä¶\n\n\n\nTentative schedule of class topics\n\n\nDate\nTime\nTopic\n\n\n\n\nJan 24\n\nGetting Started\n\n\nJan 26\n\nVersion Control\n\n\nJan 31\n\nReview: General Programming\n\n\nFeb 2\n\nReview: General Programming\n\n\nFeb 7\n\nData Input\n\n\nFeb 9\n\nData Input\n\n\nFeb 14\n\nData Visualization\n\n\nFeb 16\n\nData Visualization\n\n\nFeb 21\n\nData Verbs\n\n\nFeb 23\n\nData Verbs"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#grades",
    "href": "slides/01-Syllabus-and-Introductions.html#grades",
    "title": "Stat 251 - Introduction",
    "section": "Grades",
    "text": "Grades\n\n\n\nAssignments\nWeight\n\n\n\n\nReading Quizzes\n10%\n\n\nWeekly Homework & Participation\n50%\n\n\nMidterm Exam\n20%\n\n\nFinal Exam\n20%\n\n\n\nApproximately Weekly Homework ‚Äì started in class"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#academic-integrity-submitted-work-policy",
    "href": "slides/01-Syllabus-and-Introductions.html#academic-integrity-submitted-work-policy",
    "title": "Stat 251 - Introduction",
    "section": "Academic Integrity / Submitted Work Policy",
    "text": "Academic Integrity / Submitted Work Policy\n\nYou may (and should!) work with each other on homework assignments\nWork alone on exams\nYou must be able to explain the logic of anything you submit for a grade\nAt my discretion, I will evaluate the coherence of your explanation instead of your submitted work\nChatGPT, StackOverflow, Google are all valuable tools, but they do not help you think"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#programming",
    "href": "slides/01-Syllabus-and-Introductions.html#programming",
    "title": "Stat 251 - Introduction",
    "section": "Programming",
    "text": "Programming"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#install-course-software",
    "href": "slides/01-Syllabus-and-Introductions.html#install-course-software",
    "title": "Stat 251 - Introduction",
    "section": "Install Course Software",
    "text": "Install Course Software\nTextbook Chapter: https://bit.ly/3JtGCZR"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#next-time",
    "href": "slides/01-Syllabus-and-Introductions.html#next-time",
    "title": "Stat 251 - Introduction",
    "section": "Next Time",
    "text": "Next Time\nWe‚Äôll work on Version Control with Git\nPlease Read before class: - Computer Basics - Scripts and Notebooks - RStudio‚Äôs Interface - Version Control with Git"
  },
  {
    "objectID": "slides/02-version-control.html#version-control",
    "href": "slides/02-version-control.html#version-control",
    "title": "Version Control",
    "section": "Version Control",
    "text": "Version Control\n\nVersion control is the answer to this file naming problem.Image Source ‚ÄúPiled Higher and Deeper‚Äù by Jorge Cham www.phdcomics.com"
  },
  {
    "objectID": "slides/02-version-control.html#introduce-yourself-to-git",
    "href": "slides/02-version-control.html#introduce-yourself-to-git",
    "title": "Version Control",
    "section": "Introduce yourself to git",
    "text": "Introduce yourself to git\nIn a system terminal, run‚Ä¶\n\ngit config --global user.name 'YOUR NAME HERE'\ngit config --global user.email 'YOUR EMAIL HERE'\ngit config --global --list # check to see it worked"
  },
  {
    "objectID": "slides/02-version-control.html#set-up-ssh-authentication",
    "href": "slides/02-version-control.html#set-up-ssh-authentication",
    "title": "Version Control",
    "section": "Set up SSH authentication",
    "text": "Set up SSH authentication\nInstructions"
  },
  {
    "objectID": "slides/02-version-control.html#navigating-around-github",
    "href": "slides/02-version-control.html#navigating-around-github",
    "title": "Version Control",
    "section": "Navigating around Github",
    "text": "Navigating around Github\n(Demo)"
  },
  {
    "objectID": "slides/02-version-control.html#using-rstudio-and-git",
    "href": "slides/02-version-control.html#using-rstudio-and-git",
    "title": "Version Control",
    "section": "Using RStudio and git",
    "text": "Using RStudio and git\n(Demo)"
  },
  {
    "objectID": "slides/02-version-control.html#homework-introduction-to-github",
    "href": "slides/02-version-control.html#homework-introduction-to-github",
    "title": "Version Control",
    "section": "Homework: Introduction to Github",
    "text": "Homework: Introduction to Github\nLink"
  }
]